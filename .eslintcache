[{"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\index.js":"1","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\App.js":"2","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\reportWebVitals.js":"3","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\Home.js":"4","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Utilities\\HomeButton.js":"5","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Lists\\ohrList.js":"6","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\Guess\\Guess.js":"7","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\Multiple\\Multiple.js":"8","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\List\\List.js":"9","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Utilities\\Games\\CardGame.js":"10","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Utilities\\QuestionSettings.js":"11","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\List\\ItemList.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":770,"mtime":1608588330995,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":988,"mtime":1610543224329,"results":"17","hashOfConfig":"14"},{"size":444,"mtime":1609251141485,"results":"18","hashOfConfig":"14"},{"size":43660,"mtime":1608656681890,"results":"19","hashOfConfig":"14"},{"size":585,"mtime":1608642699906,"results":"20","hashOfConfig":"14"},{"size":228,"mtime":1608588367080,"results":"21","hashOfConfig":"14"},{"size":678,"mtime":1610542821991,"results":"22","hashOfConfig":"14"},{"size":5927,"mtime":1609261263558,"results":"23","hashOfConfig":"14"},{"size":6224,"mtime":1609261170954,"results":"24","hashOfConfig":"14"},{"size":446,"mtime":1610543086888,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"2a7tf2",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\index.js",[],["52","53"],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\App.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\reportWebVitals.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\Home.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Utilities\\HomeButton.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Lists\\ohrList.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\Guess\\Guess.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\Multiple\\Multiple.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\List\\List.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Utilities\\Games\\CardGame.js",["54"],"import { Button, Card, CardContent } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport * as list from \"../../Lists/ohrList\";\r\n\r\nconst GuessGame = (props) => {\r\n  const [step, setStep] = useState(0);\r\n  const [allQuestions, setAllQuestions] = useState();\r\n  const [showAnswer, toggleAnswer] = useState(false);\r\n  const [showEndScreen, setEndScreen] = useState(false);\r\n  const [correctAnswer, incrementCorrectAnswer] = useState(0);\r\n  const [inGame, setInGame] = useState(true);\r\n\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getAllData();\r\n  }, []);\r\n\r\n  const nextQuestion = () => {\r\n    toggleAnswer(false);\r\n    setStep(step + 1);\r\n  };\r\n\r\n  const correctQuestion = () => {\r\n    incrementCorrectAnswer(correctAnswer + 1);\r\n    nextQuestion();\r\n    return;\r\n  };\r\n\r\n  function shuffle(array) {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  const getAllData = () => {\r\n    let x;\r\n    const chapterList = list.ohrList;\r\n    let data = [];\r\n\r\n    props.questionSettings[0].chapters.forEach((element) => {\r\n      chapterList.forEach((value) => {\r\n        if (value.value === element) {\r\n          for (x = 0; x < value.data.length; x++) {\r\n            data.push(value.data[x]);\r\n            data = shuffle(data);\r\n          }\r\n        }\r\n      });\r\n    });\r\n    setAllQuestions(data);\r\n  };\r\n\r\n  const enableEndScreen = () => {\r\n    setEndScreen(true);\r\n    setInGame(false);\r\n    return;\r\n  };\r\n\r\n  const renderParagraphQuestion = () => {\r\n    if (props.questionSettings[0].mode === \"terms\") {\r\n      return <p className={\"bold center\"}>Guess the term</p>;\r\n    } else {\r\n      return <p className={\"bold center\"}>Guess the description</p>;\r\n    }\r\n  };\r\n\r\n  const renderQuestionAmount = () => {\r\n    return (\r\n      <p className={\"center\"}>\r\n        {step}/{props.questionSettings[0].amount} Questions answered\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const renderQuestion = () => {\r\n    let amount = parseInt(props.questionSettings[0].amount) - 1;\r\n    if (allQuestions === undefined) return;\r\n    if (step <= amount) {\r\n      if (step <= allQuestions.length) {\r\n        return (\r\n          <div className={\"center m-top-50\"}>\r\n            {props.questionSettings[0].mode === \"terms\" ? (\r\n              <div>\r\n                {renderParagraphQuestion()}\r\n                {renderQuestionAmount()}\r\n                <p className={\"bold\"}>Term:</p>\r\n                <Card className={\"card-game\"}>\r\n                  <CardContent>\r\n                    <p>{allQuestions[step].term}</p>\r\n                  </CardContent>\r\n                </Card>\r\n                <p className={\"bold\"}>Definition:</p>\r\n                <Card\r\n                  className={\"card-game\"}\r\n                  onClick={() => toggleAnswer(!showAnswer)}\r\n                >\r\n                  <CardContent>\r\n                    <div>\r\n                      {showAnswer ? (\r\n                        <p>{allQuestions[step].definition}</p>\r\n                      ) : (\r\n                        <p>Click me to show the answer</p>\r\n                      )}\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <p className={\"bold\"}>Definition:</p>\r\n                <Card className={\"card-game\"}>\r\n                  <CardContent>\r\n                    <p>{allQuestions[step].definition}</p>\r\n                  </CardContent>\r\n                </Card>\r\n                <p className={\"bold\"}>Term:</p>\r\n                <Card\r\n                  className={\"card-game\"}\r\n                  onClick={() => toggleAnswer(!showAnswer)}\r\n                >\r\n                  <CardContent>\r\n                    <div>\r\n                      {showAnswer ? (\r\n                        <p>{allQuestions[step].term}</p>\r\n                      ) : (\r\n                        <p>Click me to show the answer</p>\r\n                      )}\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            )}\r\n\r\n            {showAnswer ? (\r\n              <div>\r\n                <p className={\"bold\"}>Did you get the answer correct?</p>\r\n                <p>(Clicking on a button will go to the next question)</p>\r\n                <div className={\"card-game-button-group\"}>\r\n                  <div className={\"correct\"}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => correctQuestion()}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                  </div>\r\n                  <div className={\"false\"}>\r\n                    <Button\r\n                      className={\"false\"}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => nextQuestion()}\r\n                    >\r\n                      No\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        );\r\n      } else {\r\n        enableEndScreen();\r\n      }\r\n    } else {\r\n      enableEndScreen();\r\n    }\r\n  };\r\n\r\n  const renderEndScreen = () => {\r\n    return (\r\n      <div className={\"center m-top-50\"}>\r\n        <p className={\"bold\"}>Congratulations</p>\r\n        <p>\r\n          You answered {correctAnswer}/{props.questionSettings[0].amount}{\" \"}\r\n          correct\r\n        </p>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => history.push(\"/\")}\r\n        >\r\n          Go back to the home screen\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {inGame ? renderQuestion() : null}\r\n      {showEndScreen ? renderEndScreen() : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GuessGame;\r\n","C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Utilities\\QuestionSettings.js",[],"C:\\Users\\Stijn\\Desktop\\TermGuesser\\term-guesser-app\\src\\Components\\List\\ItemList.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":19,"column":6,"nodeType":"61","endLine":19,"endColumn":8,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllData'. Either include it or remove the dependency array.","ArrayExpression",["65"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [getAllData]",{"range":"68","text":"69"},[646,648],"[getAllData]"]